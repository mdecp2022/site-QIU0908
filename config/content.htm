<h1>About</h1>
<p>倉儲位置<a href="https://github.com/mdecp2022/site-QIU0908">https://github.com/mdecp2022/site-QIU0908</a></p>
<p></p>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule</p>
<p></p>
<h1>HW</h1>
<h2>w5</h2>
<div>
<pre><span class="cm-line"><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/708ff2ad1780b92706f1cdfac6d0df8f/raw/fa6afeb199aaeac8a6f73836a2e77a114125a1ea/password_generator.py">W5亂數</a><br/>
</span><span class="cm-line"><span class="cm-keyword">import</span> <span class="cm-variable">random (導入 亂數模組程式庫)</span></span><span class="cm-line">
</span><span class="cm-line"><span class="cm-keyword">import</span> <span class="cm-variable">string (導入 字串模組程式庫)</span></span><span class="cm-line">
</span><span class="cm-line"><span class="cm-keyword">def </span><span class="cm-def">password_generator</span>(<span class="cm-variable">size</span><span class="cm-operator">=</span><span class="cm-number">4</span>, <span class="cm-variable">chars</span><span class="cm-operator">=</span><span class="cm-variable">string</span>.<span class="cm-property">ascii_lowercase</span> <span class="cm-operator">+</span> <span class="cm-variable">string</span>.<span class="cm-property">digits</span>):<br/>(def 定義函數 名稱     (初始值4, 新字串=字串模組程式.英文小寫(屬性)+字串模組程式.數字串(屬性)))</span><span class="cm-line"> 
</span><span class="cm-line">    <span class="cm-string">"""Generate random password (多行文字註解 生成隨機密碼)</span>
</span><span class="cm-line"><span class="cm-string">    """</span></span><span class="cm-line">
</span><span class="cm-line">    <span class="cm-keyword">return</span> <span class="cm-string">''</span>.<span class="cm-property">join</span>(<span class="cm-variable">random</span>.<span class="cm-property">choice</span>(<span class="cm-variable">chars</span>) <span class="cm-keyword">for</span> <span class="cm-variable">_</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">size</span>))<br/>    (傳回  ''.<span>轉成新的字串(亂數模組程式庫.選擇(功能)(新字串) for迴圈 在 新字串 中選4次(初始值)))</span></span><span class="cm-line">
</span><span class="cm-line"><span class="cm-variable">pass_string</span> <span class="cm-operator">=</span> <span class="cm-string">"abcdefghkmnpqrstuwxyz123456789"<br/></span>(設定 字串模組程式庫="字串")</span><span class="cm-line">
</span><span class="cm-line"><span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-number">10</span>):<br/>(for迴圈 選(10)次)
</span><span class="cm-line">    <span class="cm-builtin">print</span>(<span class="cm-variable">password_generator</span>(<span class="cm-number">4</span>, <span class="cm-variable">pass_string</span>))<br/>    (展示(password_generator(4個字符,字串模組程式庫中))</span></pre>
</div>
<h2>w6</h2>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/5895908660440fc834a9b434eeaa357d/raw/410f5e45fde28b8852652f9e3db1733cf8e7a7c5/w6-11">1a抽點</a></p>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/5895908660440fc834a9b434eeaa357d/raw/192b611a4e650c083395dfb2c5efa7a705869c9e/w6-12">1a擷取個人靜態網頁</a></p>
<div><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/dc6fbf9e8b80b26b987ab23c82778665/raw/cfc75864fac490d248b9141c166b615533cba079/w6-1&amp;src2=https://gist.githubusercontent.com/QIU0908/dc6fbf9e8b80b26b987ab23c82778665/raw/4f3da70f3da7a1db0559071c26f9c0453cbb83fe/w6-2">1a抽點程式與擷取個人靜態網頁的程式結合</a></div>
<p></p>
<h2>w7</h2>
<p><strong>在電腦教室改版</strong></p>
<ol>
<li>設定電腦輔助設計室專用 IPv6 網路協定環境設定</li>
<li>啟動start_ipv6</li>
<li>打開命令列輸入</li>
<li> cd..  //退到上一個目錄</li>
<li> cd ss // 移動到 ss 目錄</li>
<li> 啟動 ipv6.reg //啟動key</li>
<li>cms   //啟動ss目錄</li>
<li>進入 https://localhost:9443</li>
<li>進行改版</li>
<li>改版完按 generate //動態網頁轉靜態網</li>
<li>acp "檔名"//改版推到倉儲</li>
</ol>
<p><strong>在宿舍改版</strong></p>
<ol>
<li>啟動start_ipv4</li>
<li>打開命令列輸入</li>
<li> cd..  //退到上一個目錄</li>
<li> cd ss // 移動到 ss 目錄</li>
<li> 啟動 ipv4.reg //啟動key</li>
<li>cms   //啟動ss目錄</li>
<li>進入 https://localhost:9443</li>
<li>進行改版</li>
<li>改版完按 generate //動態網頁轉靜態網</li>
<li>acp "檔名"//改版推到倉儲</li>
</ol>
<p>問題</p>
<p>Q:每次更新都要git clone --recurse-submodules 檔名每次都改,有無其他方法?</p>
<p>A:有 git pull</p>
<p></p>
<p><strong>感想</strong></p>
<p>      兩者差異只在於ipv6網路協定的啟用,但在宿舍改版的先決條件是重設</p>
<ol>
<li>
<h6>另做一份ipv4的啟動檔案不用設定 proxy</h6>
</li>
<li>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; text-align: left;">
<h6>home_ipv4中的.gitconfig 不用設定</h6>
<div>
<h6>                [http]</h6>
<h6>                 proxy = <a href="http://p42.cycu.org:3128" rel="noreferrer noopener" tabindex="-1" target="_blank" title="http://p42.cycu.org:3128/">http://p42.cycu.org:312</a></h6>
<p>因為:github.com 網站<span>只支援 IPv4 連線的，所以</span>ipv4不需要對外連線的代理主機。</p>
<p></p>
<h2>w10</h2>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/1d785166e8eceac77590ea76a4ab1597/raw/4a6d7f6a1e40e3dc20ae4c743ac5f9646982f0cf/w10-2">W10 hw1</a></p>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/65b3c4041f53f55682f18165ec68205b/raw/1536487f1475b8231f30b34570177562633161ab/w10">w10 hw2</a></p>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; text-align: left;">for i in range(1, 10, 2): //<span>for i 迴圈 整數序列 (起始值, 終止值, 遞增(減)值)</span><br/> print(i, end=" ")      //<span>輸出 (印出 i 字串, 字串間用空格隔開)</span></div>
<h2>w11</h2>
<h3>hw1</h3>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/f7d01e07610b167840a6aacbf7ad32c3/raw/608968b0dfa363925d5e805999c2103fd617a925/w11">列出 w10 小考成績與缺考學號</a></div>
<h2>w12</h2>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/24919c07d0613b0878d340401cfa3e05/raw/cdb8a9c674eae2f7b9fda3627c364f4d554b56fc/w12_hw-1.py">hw第一個練習</a></p>
<p></p>
<div>
<pre class="brush:py;auto-links:false;gutter:false;toolbar:false" contenteditable="false"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))</pre>
<p></p>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/24919c07d0613b0878d340401cfa3e05/raw/cdb8a9c674eae2f7b9fda3627c364f4d554b56fc/w12_hw-1.py">hw第二個練習</a></p>
<pre class="brush:py;auto-links:false;gutter:false;toolbar:false" contenteditable="false"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))
# 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數
user_input_temp = float(user_input_temp)
# 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值
Fahrenheit = (user_input_temp*9/5) + 32
# 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數
# 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串
print("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.")</pre>
<p></p>
<pre>.<br/><br/><br/></pre>
</div>
<h3>w12-1</h3>
<p></p>
<p></p>
<p></p>
<h2>w13</h2>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src2=https://gist.githubusercontent.com/QIU0908/835b6a7e7cef3485268f53071525bf3f/raw/50718630c794abcd3136bd8fb8dc5e57fd20c68d/w13_temp_ex2.py"><strong>w13_ex2(攝氏轉華氏)</strong><br/></a></p>
<pre><span class="cm-line"><span class="cm-string">''' //多行文字註解</span></span></pre>
<pre><span class="cm-line"><span class="cm-string"></span> </span><span class="cm-line"><span class="cm-string">f = c*9/5 + 32 </span><br/> </span><span class="cm-line"><span class="cm-string">c = (f-32)*5/9</span> <br/></span><span class="cm-line"><span class="cm-string">''' //多行文字註解</span></span></pre>
<pre><span class="cm-line"><span class="cm-string"></span> </span><span class="cm-line"><span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-builtin">input //c=</span><span class="cm-string">輸入數值<br/></span></span></pre>
<pre><span class="cm-line"><span class="cm-comment">#print(type(c)) </span>//</span><span class="cm-line">接著列出 c 變數的資料型別</span></pre>
<pre><span class="cm-line"><span class="cm-builtin"></span> </span><span class="cm-line"><span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-builtin">float</span>(<span class="cm-variable">c</span>) //<span class="cm-string">把c轉成浮點數</span><br/></span><span class="cm-line"><br/></span><span class="cm-line"><span class="cm-builtin">print</span>("你輸入的攝氏溫度"+str(c),"等於華氏溫度"+str((c*9/5+32)) //展示數值("文字"後 加上 使用STR()中函數後的字串,同左)</span></pre>
<p><strong><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src2=https://gist.githubusercontent.com/QIU0908/835b6a7e7cef3485268f53071525bf3f/raw/245b6c741913f78eaabb26c3c892c4c985e3d2fc/w13_temp_ex3.py">w13 ex3(華式轉攝式)</a></strong></p>
<p>與上面差f = c*9/5+32 ,c = (f-32)*5/9</p>
<h2>w14</h2>
<p><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/b9655bed78ae55d339a796e77edc8a41/raw/c1dfff950d2ac041bcfb69ef625f78b55ad6df42/w14">w14缺考 成績</a></p>
<p></p>
<h2>w15</h2>
<p></p>
<p>Q:為何學習計算機程式需要建立個人倉儲?</p>
<p>A:為了記錄每次更新改版。</p>
<p>Q:全球資訊網能夠提供甚麼功能或有什麼優點?</p>
<p>A:見面無距離，看書不用拿厚重的書。</p>
<p>Q:Replit, stud.cycu.org 與 localhost 分別代表甚麼?</p>
<p>A:Replit 公司用。</p>
<p>   stud 學校用。</p>
<p>   localhost 用github倉儲推上網頁轉靜態。</p>
<p>Q:https, ssh 到底提供使用者那些功能或優點?</p>
<p>A:提供加密傳輸，讓有心人士沒那麼容易重後台改版。</p>
<p>Q:Brython 與 Python 有甚麼差別?</p>
<p>A:Brython可以把程式丟進去執行</p>
<p>   Python可以寫出程式(程式語言)</p>
<p>Q:能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</p>
<p>A:代表python能做幾何運算</p>
<p>Q:變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?</p>
<p>A:代表又有類似數學的複合函數的東西要學。</p>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><a href="https://mdecp2022.github.io/site-QIU0908/content/Brython.html?src=https://gist.githubusercontent.com/QIU0908/ca8e4a40d13c8fcfdc9db8478c5e2186/raw/3d6d90b0b0d25c05fb4289720473d34fd4ee0648/w15" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://mde.tw/content/python.html?src=https://gist.githubusercontent.com/mdecycu/82d5d77b917a5d6c656233767afe4bea/raw/faa9d2c0f56d7ae4294969ecd5c3448aa5b8a85c/rect_walk.py">綠色方塊行走程式</a></div>
<h2>w17</h2>
<h5>1.</h5>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0   #初始數值 = 0 只展示 for 迴圈 可不打 因為沒用到
for i in range(1,6,1): #for i 迴圈 範圍(起始,終使值,增量)   注意1. for迴圈最後是" : " 2.要包含終使值要+1
   print(i) #展示 i 數列 要記得縮排,電腦才知道是要展示for中的內容</pre>
<p>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</p>
<h5>2.每次 <span>起始</span> <span>終使值 要變動都要去range中去改有點麻煩</span></h5>
<p><span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0

start = 1 #定義start 數值

end = 445 #定義end 數值

for i in range(start,end+1,1):  #所以把終使值用end  起始值用start 代替

   print(i)</pre>
<p><br/>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</p>
<h5><span>3.把 i 數列改成級數</span></h5>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0

start = 1 

end = 445

for i in range(start,end+1,1):

  sum = sum + i #程式跑第一次sum的左值=0 ,右值=0+1 程式跑第二次sum的左值=1 ,右值=1+2

  #print(i) #因為程式會先讀到這行,但是要的是級數和所以要註解掉

print ("由" + str(start)  + "加到" + str(end) + "等於" + str(sum)) </pre>
<p><br/>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</p>
<h5>4.把程式改成函式</h5>
<p style="text-align: left;"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def sg(start=1, end=55): #定義函式 名稱為sg (初始數值)   注意最後是有" : " 
          sum = 0
          #start = 1 #因為會被sg的數值相干擾所以註解掉
          #end = 445
          for i in range(start,end+1,1):
             sum = sum + i 
             #print(i) 
          print ("由" + str(start) + "加到" + str(end) + "等於" + str(sum))

sg() #把sg數值帶回函式

sg(23,44) #sg新數值帶回函式</pre>
<p style="text-align: left;"><span><br/>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</span></p>
<h5 style="text-align: left;"><span>5.練習公分轉英吋</span></h5>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def length(inch=1):
 cm = inch * 2.54

 print (cm)

length(5)</pre>
<p style="text-align: left;">\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</p>
<h5 style="text-align: left;">6.列出prython關鍵字</h5>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import keyword
print(keyword.kwlist)

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</pre>
<h3>canvas</h3>
<!-- 納入 Brython 環境 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./static/','./../downloads/py/']});
}
</script>
<!-- 給定 brython_div1 division 標註 --></p>
<div id="brython_div1"></div>
<!-- 加入啟動按鈕後的 Rect 行走程式原始碼 -->
<p>
<script type="text/python">
# 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint
import math

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div1"]

# 建立 buttons
brython_div <= html.BUTTON("啟動", id="power")
brython_div <= html.BR()

# 將 canvas 標註放入 brython_div1 所在位置
# 頁面中原本就已經放入 <div id="brython_div"></div> 標註
brython_div <= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立一個 dRect() 函式
# s default 為 1, c defaul 為紅色
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath();
    ctx.rect(lux, luy, w, h)
    ctx.stroke();
    
# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
    ctx.font = str(s) + "px Arial";
    ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
    # 利用迴圈與座標增量繪圖
    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
    for i in range(wnum+1):
        for j in range(hnum+1):
            # 畫上下直線
            yend = starty + h*(hnum)
            xend = startx + w*(wnum)
            x = startx + i*w
            draw_line(x, starty, x, yend, color)
            # 畫左右直線
            y = starty + j*h
            draw_line(startx, y, xend, y, color)
            #wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
    # lx is x coord of the left up corner
    # rx is the x coord of th right down corner
    x = (lx + rx)/2
    y = (ly + ry)/2
    return x, y
    
# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
    # gx is the grid coord at x direction
    # gy is the grid coord at y direction
    # gw is the with of the green rect
    # gh is the height of the green rect
    lx = origx + (gx-1)*w
    ly = origy + (gy-1)*h
    rx = origx + gx*w
    ry = origy + gy*h
    cx, cy = center(lx, ly, rx, ry)
    # glx is the x coord of the left corner
    # gly is the y coord of the left corner
    glx = cx - gw/2
    gly = cy - gh/2
    # 利用設定的顏色值畫出 rectangle
    ctx.fillStyle = color
    ctx.fillRect(glx, gly, gw, gh)

# 以白色覆蓋位於 (nowx, nowy) 
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
    draw_rect(nowx, nowy, 30+1, 30+1, color="white")

# 畫出位於 (nowx, nowy) 的綠色方塊
def draw():
    draw_rect(nowx, nowy, 30, 30, color="lime")

# 繞著外圍行走
def walk():
    global stepx, stepy
    # 向下
    if nowy < hnum and nowx == 1:
        stepx = 0
        stepy = 1
    # 向右
    elif nowx < wnum and nowy == hnum:
        stepx = 1
        stepy = 0
    # 向上
    elif nowy == hnum and nowx == wnum:
        stepx = 0
        stepy = -1
    # 向左
    elif nowx == wnum and nowy == 1:
        stepx = -1
        stepy = 0
        
# 每隔短暫時間即呼叫執行一次的函式
def game():
    # 因 nowx 與 nowy 在函式外宣告
    # 且在函式內改變對應值, 因此需宣告為 global
    global nowx, nowy
    walk()
    wipe()
    nowx += stepx
    nowy += stepy
    draw()

# 將 anim 設為 None
anim = None
 
def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        #timer.clear_interval(anim)
        browser.timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'
        
# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
#grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")
#draw_line(0,0, 600, 600, )

ctx.beginPath();
ctx.arc(100, 75, 50, 0, -3/4* math.pi);
ctx.stroke();

doc["power"].bind("click", launchAnimation)
#browser.timer.set_interval(game, 100)
</script>
</p><h1>cp2022</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p></p>
<div id="brython_div1"></div>
<hr/>
<p>從 1 累加到 100 part2:</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label></form>
<p></p>
<p></p>
<p><textarea autocomplete="off" id="kw_console2"></textarea></p>
<p>cp2022 &lt;&lt; <a href="/get_page/Brython/cp2022.html">Previous</a></p>
<div class="container"><nav>
<div class="site-wrap"><header class="site-navbar py-4 bg-white" role="banner">
<div class="container">
<div class="row align-items-center">
<div class="container"><nav>
<div class="site-wrap"><header class="site-navbar py-4 bg-white" role="banner">
<div class="container">
<div class="row align-items-center">
<div class="container"><nav>
<div class="site-wrap">
<div class="site-mobile-menu"><!-- footer -->
<div class="container">
<div class="row pt-3 mx-auto">
<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --> Copyright ©
<script>
document.write(new Date().getFullYear());
</script>
All rights reserved | This template is made with <i aria-hidden="true" class="icon-heart"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a> <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
</div>
</div>
<!-- for footer -->
<p></p>
<div class="container"><nav>
<div class="site-wrap"><header class="site-navbar py-4 bg-white" role="banner">
<div class="container">
<div class="row align-items-center">
<div class="container"><nav>
<div class="site-wrap">
<div class="site-mobile-menu">
<div class="site-mobile-menu-header"><!-- <script>
  MathJax = {
    tex: {inlineMath: [['$', '$'], ['\(', '\)']]}
  };
  </script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>-->
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/get_page/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/get_page/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/get_page/cmsimde/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/get_page/cmsimde/static/ace/ace.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/get_page/cmsimde/static/Cango-24v03-min.js"></script>
<script src="/get_page/cmsimde/static/gearUtils-09.js"></script>
<script src="/get_page/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="/get_page/cmsimde/static/sylvester.js"></script>
<script src="/get_page/cmsimde/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/><br/><br/><br/><br/><br/>
<p></p>
<!-- for footer -->
<p></p>
<!-- for site wrap -->
<p></p>
<!-- <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script> -->
<p>
<script src="/get_page/cmsimde/static/chimper/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery-ui.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/popper.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/owl.carousel.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.stellar.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.countdown.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.magnific-popup.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap-datepicker.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/aos.js"></script>
</p>
<!--
            <script src="../cmsimde/static/chimper/js/typed.js"></script>
                    <script>
                    var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
                    </script>
            -->
<p>
<script src="/get_page/cmsimde/static/chimper/js/main.js"></script>
</p>
<!-- 啟用 LaTeX equations 編輯 -->
<p></p>
<!-- <script>
  MathJax = {
    tex: {inlineMath: [['$', '$'], ['\(', '\)']]}
  };
  </script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>--></div>
</div>
</div>
</nav></div>
</div>
</div>
</header></div>
</nav></div>
</div>
</div>
</nav></div>
</div>
</div>
</header></div>
</nav></div>
</div>
</div>
</header></div>
</nav></div>
</div>
</div>
</li>
</ol>